<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁月随想</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhenxingliu.github.io/"/>
  <updated>2020-05-28T05:50:31.332Z</updated>
  <id>http://zhenxingliu.github.io/</id>
  
  <author>
    <name>blueheart</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>wget使用</title>
    <link href="http://zhenxingliu.github.io/2020/05/28/wget%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhenxingliu.github.io/2020/05/28/wget%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-28T05:49:26.000Z</published>
    <updated>2020-05-28T05:50:31.332Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的之后在后台执行。这意味这你可以登录系统，启动一个wget下载任务，然后退出系统，wget将在后台执行直到任务完成，相对于其它大部分浏览器在下载大量数据时需要用户一直的参与，这省去了极大的麻烦。</p><p>wget 可以跟踪HTML页面上的链接依次下载来创建远程服务器的本地版本，完全重建原始站点的目录结构。这又常被称作”递归下载”。在递归下载的时候，wget 遵循Robot Exclusion标准(/robots.txt). wget可以在下载的同时，将链接转换成指向本地文件，以方便离线浏览。</p><p>wget 非常稳定，它在带宽很窄的情况下和不稳定网络中有很强的适应性.如果是由于网络的原因下载失败，wget会不断的尝试，直到整个文件下载完毕。如果是服务器打断下载过程，它会再次联到服务器上从停止的地方继续下载。这对从那些限定了链接时间的服务器上下载大文件非常有用。</p><p>1．命令格式：</p><p>wget [参数] [URL地址]</p><p>2．命令功能：</p><p>用于从网络上下载资源，没有指定目录，下载资源回默认为当前目录。wget虽然功能强大，但是使用起来还是比较简单：</p><p>1）支持断点下传功能；这一点，也是网络蚂蚁和FlashGet当年最大的卖点，现在，Wget也可以使用此功能，那些网络不是太好的用户可以放心了；</p><p>2）同时支持FTP和HTTP下载方式；尽管现在大部分软件可以使用HTTP方式下载，但是，有些时候，仍然需要使用FTP方式下载软件；</p><p>3）支持代理服务器；对安全强度很高的系统而言，一般不会将自己的系统直接暴露在互联网上，所以，支持代理是下载软件必须有的功能；</p><p>4）设置方便简单；可能，习惯图形界面的用户已经不是太习惯命令行了，但是，命令行在设置上其实有更多的优点，最少，鼠标可以少点很多次，也不要担心是否错点鼠标；</p><p>5）程序小，完全免费；程序小可以考虑不计，因为现在的硬盘实在太大了；完全免费就不得不考虑了，即使网络上有很多所谓的免费软件，但是，这些软件的广告却不是我们喜欢的。</p><p>3．命令参数：</p><p>启动参数：</p><p>-V, –version 显示wget的版本后退出</p><p>-h, –help 打印语法帮助</p><p>-b, –background 启动后转入后台执行</p><p>-e, –execute=COMMAND 执行`.wgetrc’格式的命令，wgetrc格式参见/etc/wgetrc或~/.wgetrc</p><p>记录和输入文件参数：</p><p>-o, –output-file=FILE 把记录写到FILE文件中</p><p>-a, –append-output=FILE 把记录追加到FILE文件中</p><p>-d, –debug 打印调试输出</p><p>-q, –quiet 安静模式(没有输出)</p><p>-v, –verbose 冗长模式(这是缺省设置)</p><p>-nv, –non-verbose 关掉冗长模式，但不是安静模式</p><p>-i, –input-file=FILE 下载在FILE文件中出现的URLs</p><p>-F, –force-html 把输入文件当作HTML格式文件对待</p><p>-B, –base=URL 将URL作为在-F -i参数指定的文件中出现的相对链接的前缀</p><p>–sslcertfile=FILE 可选客户端证书</p><p>–sslcertkey=KEYFILE 可选客户端证书的KEYFILE</p><p>–egd-file=FILE 指定EGD socket的文件名</p><p>下载参数：</p><p>–bind-address=ADDRESS 指定本地使用地址(主机名或IP，当本地有多个IP或名字时使用)</p><p>-t, –tries=NUMBER 设定最大尝试链接次数(0 表示无限制).</p><p>-O –output-document=FILE 把文档写到FILE文件中</p><p>-nc, –no-clobber 不要覆盖存在的文件或使用.#前缀</p><p>-c, –continue 接着下载没下载完的文件</p><p>–progress=TYPE 设定进程条标记</p><p>-N, –timestamping 不要重新下载文件除非比本地文件新</p><p>-S, –server-response 打印服务器的回应</p><p>–spider 不下载任何东西</p><p>-T, –timeout=SECONDS 设定响应超时的秒数</p><p>-w, –wait=SECONDS 两次尝试之间间隔SECONDS秒</p><p>–waitretry=SECONDS 在重新链接之间等待1…SECONDS秒</p><p>–random-wait 在下载之间等待0…2*WAIT秒</p><p>-Y, –proxy=on/off 打开或关闭代理</p><p>-Q, –quota=NUMBER 设置下载的容量限制</p><p>–limit-rate=RATE 限定下载输率</p><p>目录参数：</p><p>-nd –no-directories 不创建目录</p><p>-x, –force-directories 强制创建目录</p><p>-nH, –no-host-directories 不创建主机目录</p><p>-P, –directory-prefix=PREFIX 将文件保存到目录 PREFIX/…</p><p>–cut-dirs=NUMBER 忽略 NUMBER层远程目录</p><p>HTTP 选项参数：</p><p>–http-user=USER 设定HTTP用户名为 USER.</p><p>–http-passwd=PASS 设定http密码为 PASS</p><p>-C, –cache=on/off 允许/不允许服务器端的数据缓存 (一般情况下允许)</p><p>-E, –html-extension 将所有text/html文档以.html扩展名保存</p><p>–ignore-length 忽略 `Content-Length’头域</p><p>–header=STRING 在headers中插入字符串 STRING</p><p>–proxy-user=USER 设定代理的用户名为 USER</p><p>–proxy-passwd=PASS 设定代理的密码为 PASS</p><p>–referer=URL 在HTTP请求中包含 `Referer: URL’头</p><p>-s, –save-headers 保存HTTP头到文件</p><p>-U, –user-agent=AGENT 设定代理的名称为 AGENT而不是 Wget/VERSION</p><p>–no-http-keep-alive 关闭 HTTP活动链接 (永远链接)</p><p>–cookies=off 不使用 cookies</p><p>–load-cookies=FILE 在开始会话前从文件 FILE中加载cookie</p><p>–save-cookies=FILE 在会话结束后将 cookies保存到 FILE文件中</p><p>FTP 选项参数：</p><p>-nr, –dont-remove-listing 不移走 `.listing’文件</p><p>-g, –glob=on/off 打开或关闭文件名的 globbing机制</p><p>–passive-ftp 使用被动传输模式 (缺省值).</p><p>–active-ftp 使用主动传输模式</p><p>–retr-symlinks 在递归的时候，将链接指向文件(而不是目录)</p><p>递归下载参数：</p><p>-r, –recursive 递归下载－－慎用!</p><p>-l, –level=NUMBER 最大递归深度 (inf 或 0 代表无穷)</p><p>–delete-after 在现在完毕后局部删除文件</p><p>-k, –convert-links 转换非相对链接为相对链接</p><p>-K, –backup-converted 在转换文件X之前，将之备份为 X.orig</p><p>-m, –mirror 等价于 -r -N -l inf -nr</p><p>-p, –page-requisites 下载显示HTML文件的所有图片</p><p>递归下载中的包含和不包含(accept/reject)：</p><p>-A, –accept=LIST 分号分隔的被接受扩展名的列表</p><p>-R, –reject=LIST 分号分隔的不被接受的扩展名的列表</p><p>-D, –domains=LIST 分号分隔的被接受域的列表</p><p>–exclude-domains=LIST 分号分隔的不被接受的域的列表</p><p>–follow-ftp 跟踪HTML文档中的FTP链接</p><p>–follow-tags=LIST 分号分隔的被跟踪的HTML标签的列表</p><p>-G, –ignore-tags=LIST 分号分隔的被忽略的HTML标签的列表</p><p>-H, –span-hosts 当递归时转到外部主机</p><p>-L, –relative 仅仅跟踪相对链接</p><p>-I, –include-directories=LIST 允许目录的列表</p><p>-X, –exclude-directories=LIST 不被包含目录的列表</p><p>-np, –no-parent 不要追溯到父目录</p><p>wget -S –spider url 不下载只显示过程</p><p>4．使用实例：</p><p>实例1：使用wget下载单个文件</p><p>命令：</p><p>wget <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>说明：</p><p>以下的例子是从网络下载一个文件并保存在当前目录，在下载的过程中会显示进度条，包含（下载完成百分比，已经下载的字节，当前下载速度，剩余下载时间）。</p><p>实例2：使用wget -O下载并以不同的文件名保存</p><p>命令：</p><p>: wget -O wordpress.zip <a href="http://www.minjieren.com/download.aspx?id=1080" target="_blank" rel="noopener">http://www.minjieren.com/download.aspx?id=1080</a></p><p>说明：</p><p>wget默认会以最后一个符合”/”的后面的字符来命令，对于动态链接的下载通常文件名会不正确。</p><p>错误：下面的例子会下载一个文件并以名称download.aspx?id=1080保存</p><p>wget <a href="http://www.minjieren.com/download?id=1" target="_blank" rel="noopener">http://www.minjieren.com/download?id=1</a></p><p>即使下载的文件是zip格式，它仍然以download.php?id=1080命令。</p><p>正确：为了解决这个问题，我们可以使用参数-O来指定一个文件名：</p><p>wget -O wordpress.zip <a href="http://www.minjieren.com/download.aspx?id=1080" target="_blank" rel="noopener">http://www.minjieren.com/download.aspx?id=1080</a></p><p>实例3：使用wget –limit -rate限速下载</p><p>命令：</p><p>wget –limit-rate=300k <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>说明：</p><p>当你执行wget的时候，它默认会占用全部可能的宽带下载。但是当你准备下载一个大文件，而你还需要下载其它文件时就有必要限速了。</p><p>实例4：使用wget -c断点续传</p><p>命令：</p><p>wget -c <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>说明：</p><p>使用wget -c重新启动下载中断的文件，对于我们下载大文件时突然由于网络等原因中断非常有帮助，我们可以继续接着下载而不是重新下载一个文件。需要继续中断的下载时可以使用-c参数。</p><p>实例5：使用wget -b后台下载</p><p>命令：</p><p>wget -b <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>说明：</p><p>对于下载非常大的文件的时候，我们可以使用参数-b进行后台下载。</p><p>wget -b <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>Continuing in background, pid 1840.</p><p>Output will be written to `wget-log’.</p><p>你可以使用以下命令来察看下载进度：</p><p>tail -f wget-log</p><p>实例6：伪装代理名称下载</p><p>命令：</p><p>wget –user-agent=”Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16” <a href="http://www.minjieren.com/wordpress-3.1-zh_CN.zip" target="_blank" rel="noopener">http://www.minjieren.com/wordpress-3.1-zh_CN.zip</a></p><p>说明：</p><p>有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过–user-agent参数伪装。</p><p>实例7：使用wget –spider测试下载链接</p><p>命令：</p><p>wget –spider URL</p><p>说明：</p><p>当你打算进行定时下载，你应该在预定时间测试下载链接是否有效。我们可以增加–spider参数进行检查。</p><p>wget –spider URL</p><p>如果下载链接正确，将会显示</p><p>wget –spider URL</p><p>Spider mode enabled. Check if remote file exists.</p><p>HTTP request sent, awaiting response… 200 OK</p><p>Length: unspecified [text/html]</p><p>Remote file exists and could contain further links,</p><p>but recursion is disabled – not retrieving.</p><p>这保证了下载能在预定的时间进行，但当你给错了一个链接，将会显示如下错误</p><p>wget –spider url</p><p>Spider mode enabled. Check if remote file exists.</p><p>HTTP request sent, awaiting response… 404 Not Found</p><p>Remote file does not exist – broken link!!!</p><p>你可以在以下几种情况下使用spider参数：</p><p>定时下载之前进行检查</p><p>间隔检测网站是否可用</p><p>检查网站页面的死链接</p><p>实例8：使用wget –tries增加重试次数</p><p>命令：</p><p>wget –tries=40 URL</p><p>说明：</p><p>如果网络有问题或下载一个大文件也有可能失败。wget默认重试20次连接下载文件。如果需要，你可以使用–tries增加重试次数。</p><p>实例9：使用wget -i下载多个文件</p><p>命令：</p><p>wget -i filelist.txt</p><p>说明：</p><p>首先，保存一份下载链接文件</p><p>cat &gt; filelist.txt</p><p>url1</p><p>url2</p><p>url3</p><p>url4</p><p>接着使用这个文件和参数-i下载</p><p>实例10：使用wget –mirror镜像网站</p><p>命令：</p><p>wget –mirror -p –convert-links -P ./LOCAL URL</p><p>说明：</p><p>下载整个网站到本地。</p><p>–miror:开户镜像下载</p><p>-p:下载所有为了html页面显示正常的文件</p><p>–convert-links:下载后，转换成本地的链接</p><p>-P ./LOCAL：保存所有文件和目录到本地指定目录</p><p>实例11：使用wget –reject过滤指定格式下载</p><p>命令：<br>wget –reject=gif ur</p><p>说明：</p><p>下载一个网站，但你不希望下载图片，可以使用以下命令。</p><p>实例12：使用wget -o把下载信息存入日志文件</p><p>命令：</p><p>wget -o download.log URL</p><p>说明：</p><p>不希望下载信息直接显示在终端而是在一个日志文件，可以使用</p><p>实例13：使用wget -Q限制总下载文件大小</p><p>命令：</p><p>wget -Q5m -i filelist.txt</p><p>说明：</p><p>当你想要下载的文件超过5M而退出下载，你可以使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效。</p><p>实例14：使用wget -r -A下载指定格式文件</p><p>命令：</p><p>wget -r -A.pdf url</p><p>说明：</p><p>可以在以下情况使用该功能：</p><p>下载一个网站的所有图片</p><p>下载一个网站的所有视频</p><p>下载一个网站的所有PDF文件</p><p>实例15：使用wget FTP下载</p><p>命令：</p><p>wget ftp-url</p><p>wget –ftp-user=USERNAME –ftp-password=PASSWORD url</p><p>说明：</p><p>可以使用wget来完成ftp链接的下载。</p><p>使用wget匿名ftp下载：</p><p>wget ftp-url</p><p>使用wget用户名和密码认证的ftp下载</p><p>wget –ftp-user=USERNAME –ftp-password=PASSWORD url</p><p>备注：编译安装</p><p>使用如下命令编译安装： </p><p># tar zxvf wget-1.9.1.tar.gz </p><p># cd wget-1.9.1 </p><p># ./configure </p><p># make </p><p># make install </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux系统中的wget是一个下载文件的工具，它用在命令行下。对于Linux用户是必不可少的工具，我们经常要下载一些软件或从远程服务器恢复备份到本地服务器。wget支持HTTP，HTTPS和FTP协议，可以使用HTTP代理。所谓的自动下载是指，wget可以在用户退出系统的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>curl使用</title>
    <link href="http://zhenxingliu.github.io/2020/05/28/curl%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhenxingliu.github.io/2020/05/28/curl%E4%BD%BF%E7%94%A8/</id>
    <published>2020-05-28T05:22:03.000Z</published>
    <updated>2020-05-28T05:29:03.629Z</updated>
    
    <content type="html"><![CDATA[<p><code>curl</code>是一个开源的用于数据传输的命令行工具与库，它使用<code>URL</code>语法格式，支持众多传输协议，包括：HTTP、HTTPS、FTP、FTPS、GOPHER、TFTP、SCP、SFTP、SMB、TELNET、DICT、LDAP、LDAPS、FILE、IMAP、SMTP、POP3、RTSP和RTMP。<code>curl</code>库提供了很多强大的功能，你可以利用它来进行HTTP/HTTPS请求、上传/下载文件等，且支持Cookie、认证、代理、限速等。</p><ol><li><code>curl</code>的使用<ul><li>[1.1 URL访问]</li><li>[1.2 表单提交]</li><li>[1.3 其它HTTP请求方法]</li><li>[1.4 文件上传]</li><li>[1.5 HTTPS支持]</li><li>[1.6 添加请求头]</li><li>[1.7 Cookie支持]</li></ul></li><li><code>curl</code>语法及选项]</li></ol><h2 id="1-curl的使用"><a href="#1-curl的使用" class="headerlink" title="1. curl的使用"></a>1. <code>curl</code>的使用</h2><h3 id="1-1-URL访问"><a href="#1-1-URL访问" class="headerlink" title="1.1 URL访问"></a>1.1 URL访问</h3><p>访问一个网页时，可以使用<code>curl</code>命令后加上要访问的网址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl itbilu.com </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&#x2F;1.6.2&lt;&#x2F;center&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>如上所示，我们就看到所访问网址的页面源码。</p><p><strong>重定向跟踪</strong></p><p>在上面示例中，页面使用了<a href="https://itbilu.com/nodejs/core/4yMyt38M.html" target="_blank" rel="noopener">301</a>重定向，这时我们可以添加<code>-L</code>参数来跟踪URL重定向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L itbilu.com</span><br></pre></td></tr></table></figure><p><strong>页面保存</strong></p><p>如果需要将页面源码保存到本地，可以使用<code>-o</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -o [文件名] itbilu.com</span><br></pre></td></tr></table></figure><p><strong>查看头信息</strong></p><p>如果需要查看访问页面的可以添加<code>-i</code>或<code>--include</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i itbilu.com</span><br></pre></td></tr></table></figure><p>添加<code>-i</code>参数后，页面响应头会和页面源码（响应体）一块返回。如果只想查看响应头，可以使用<code>-I</code>或<code>--head</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl -I itbilu.com</span><br><span class="line">HTTP&#x2F;1.1 301 Moved Permanently</span><br><span class="line">Server: nginx&#x2F;1.6.2</span><br><span class="line">Date: Sun, 25 Jun 2017 02:03:45 GMT</span><br><span class="line">Content-Type: text&#x2F;html</span><br><span class="line">Content-Length: 184</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https:&#x2F;&#x2F;itbilu.com&#x2F;</span><br></pre></td></tr></table></figure><h3 id="1-2-表单提交"><a href="#1-2-表单提交" class="headerlink" title="1.2 表单提交"></a>1.2 表单提交</h3><p>通过<code>Form</code>表单，可以将Web页面的表单数据提交到服务端。提交表单时，可以使用<code>GET</code>或<code>POST</code>提交方法。</p><p><code>curl</code>同样支持表单数据提交，也可以使用<code>GET</code>或<code>POST</code>提交方法。</p><p><strong>GET数据提交</strong></p><p>当全用<code>GET</code>表单数据提交时，提交数据会被附加到请求URL的后面。类型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl &#39;&#x2F;&#x2F;itbilu.com&#x2F;?keyword&#x3D;linux&amp;page&#x3D;3&#39;</span><br></pre></td></tr></table></figure><p>使用<code>curl</code>进行<code>GET</code>数据提交时，也可以直接把提交数据添加到URL后面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;itbilu.com&#x2F;?keyword&#x3D;linux&amp;page&#x3D;3</span><br></pre></td></tr></table></figure><p><strong>POST数据提交</strong></p><p><code>curl</code>使用<code>POST</code>提交表单数据时，除了<code>-X</code>参数指定请求方法外，还要使用<code>--data</code>参数添加提交数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST --data &#39;keyword&#x3D;linux&#39; itbilu.com</span><br></pre></td></tr></table></figure><h3 id="1-3-其它HTTP请求方法"><a href="#1-3-其它HTTP请求方法" class="headerlink" title="1.3 其它HTTP请求方法"></a>1.3 其它HTTP请求方法</h3><p>目前为止，我们使用<code>GET</code>和<code>POST</code>两种HTTP请求。<code>curl</code>支持所有<a href="https://itbilu.com/other/relate/EkwKysXIl.html" target="_blank" rel="noopener">HTTP请求方法</a>，只要通过<code>-X</code>参数指定即可。</p><p>如，使用<code>DELETE</code>请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X DELETE itbilu.com&#x2F;examlple.html</span><br></pre></td></tr></table></figure><p>使用<code>PUT</code>请求，并指定请求数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT --data &#39;keyword&#x3D;linux&#39; itbilu.com</span><br></pre></td></tr></table></figure><h3 id="1-4-文件上传"><a href="#1-4-文件上传" class="headerlink" title="1.4 文件上传"></a>1.4 文件上传</h3><p><code>curl</code>支持文件上传，上传文件时使用<code>-T</code>或<code>--upload-file</code>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -T .&#x2F;index.html www.uploadhttp.com&#x2F;receive.cgi</span><br></pre></td></tr></table></figure><h3 id="1-5-HTTPS支持"><a href="#1-5-HTTPS支持" class="headerlink" title="1.5 HTTPS支持"></a>1.5 HTTPS支持</h3><p>对于使用了<code>SSL/TLS</code>加密的HTTPS协议，可以使用<code>curl</code>直接访问：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;itbilu.com</span><br></pre></td></tr></table></figure><p>如果使用的本地<code>ssl证书</code>认证的HTTPS，可以通过<code>-E</code>或<code>--cert</code>参数指定本地证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -E mycert.pem https:&#x2F;itbilu.com</span><br></pre></td></tr></table></figure><h3 id="1-6-添加请求头"><a href="#1-6-添加请求头" class="headerlink" title="1.6 添加请求头"></a>1.6 添加请求头</h3><p>有时在进行HTTP请求时，需要自定义请求头。在<code>curl</code>中，可以通过<code>-H</code>或<code>--header</code>参数来指定请求头。多次使用<code>-H</code>或<code>--header</code>参数可指定多个请求头。</p><p>如，指定<code>Content-Type</code>及<code>Authorization</code>请求头：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -H &#39;Content-Type:application&#x2F;json&#39; -H &#39;Authorization: bearer eyJhbGciOiJIUzI1NiJ9&#39; itbilu.com</span><br></pre></td></tr></table></figure><h3 id="1-7-Cookie支持"><a href="#1-7-Cookie支持" class="headerlink" title="1.7 Cookie支持"></a>1.7 Cookie支持</h3><p><a href="https://itbilu.com/other/relate/4J4n8fIPe.html" target="_blank" rel="noopener"><code>Cookie</code></a>是一种常用的保持服务端会话信息的方法，<code>crul</code>也支持使用<code>Cookie</code>。</p><p>可以通过<code>--cookie</code>参数指定发送请求时的<code>Cookie</code>值，也可以通过<code>-b [文件名]</code>来指定一个存储了<code>Cookie</code>值的本地文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -b stored_cookies_in_file itbilu.com</span><br></pre></td></tr></table></figure><p><code>Cookie</code>值可能会被服务器所返回的值所修改，并应用于下次HTTP请求。这时，可以能过<code>-c</code>参数指定存储服务器返回<code>Cookie</code>值的存储文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -b cookies.txt -c newcookies.txt itbilu.com</span><br></pre></td></tr></table></figure><p>除以上用法外，<code>curl</code>还可以设置用户代理（客户端）信息、使用代理服务器、指定认证用户名／密码等。详见：<a href="https://itbilu.com/linux/man/4yZ9qH_7X.html#options" target="_blank" rel="noopener"><code>curl</code>语法及选项</a></p><h2 id="2-curl语法及选项"><a href="#2-curl语法及选项" class="headerlink" title="2. curl语法及选项"></a>2. <code>curl</code>语法及选项</h2><p><strong>语法</strong></p><p><code>curl</code>语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [options...] &lt;url&gt;</span><br></pre></td></tr></table></figure><p><strong>参数选项</strong></p><p><code>curl</code>（<code>7.29.0</code>）所支持的选项（<code>options</code>）参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">在以下选项中，(H) 表示仅适用 HTTP&#x2F;HTTPS ，(F) 表示仅适用于 FTP</span><br><span class="line">    --anyauth       选择 &quot;any&quot; 认证方法 (H)</span><br><span class="line">-a, --append        添加要上传的文件 (F&#x2F;SFTP)</span><br><span class="line">    --basic         使用HTTP基础认证（Basic Authentication）(H)</span><br><span class="line">    --cacert FILE   CA 证书，用于每次请求认证 (SSL)</span><br><span class="line">    --capath DIR    CA 证书目录 (SSL)</span><br><span class="line">-E, --cert CERT[:PASSWD] 客户端证书文件及密码 (SSL)</span><br><span class="line">    --cert-type TYPE 证书文件类型 (DER&#x2F;PEM&#x2F;ENG) (SSL)</span><br><span class="line">    --ciphers LIST  SSL 秘钥 (SSL)</span><br><span class="line">    --compressed    请求压缩 (使用 deflate 或 gzip)</span><br><span class="line">-K, --config FILE   指定配置文件</span><br><span class="line">    --connect-timeout SECONDS  连接超时设置</span><br><span class="line">-C, --continue-at OFFSET  断点续转</span><br><span class="line">-b, --cookie STRING&#x2F;FILE  Cookies字符串或读取Cookies的文件位置 (H)</span><br><span class="line">-c, --cookie-jar FILE  操作结束后，要写入 Cookies 的文件位置 (H)</span><br><span class="line">    --create-dirs   创建必要的本地目录层次结构</span><br><span class="line">    --crlf          在上传时将 LF 转写为 CRLF</span><br><span class="line">    --crlfile FILE  从指定的文件获得PEM格式CRL列表</span><br><span class="line">-d, --data DATA     HTTP POST 数据 (H)</span><br><span class="line">    --data-ascii DATA  ASCII 编码 HTTP POST 数据 (H)</span><br><span class="line">    --data-binary DATA  binary 编码 HTTP POST 数据 (H)</span><br><span class="line">    --data-urlencode DATA  url 编码 HTTP POST 数据 (H)</span><br><span class="line">    --delegation STRING GSS-API 委托权限</span><br><span class="line">    --digest        使用数字身份验证 (H)</span><br><span class="line">    --disable-eprt  禁止使用 EPRT 或 LPRT (F)</span><br><span class="line">    --disable-epsv  禁止使用 EPSV (F)</span><br><span class="line">-D, --dump-header FILE  将头信息写入指定的文件</span><br><span class="line">    --egd-file FILE  为随机数据设置EGD socket路径(SSL)</span><br><span class="line">    --engine ENGINGE  加密引擎 (SSL). &quot;--engine list&quot; 指定列表</span><br><span class="line">-f, --fail          连接失败时不显示HTTP错误信息 (H)</span><br><span class="line">-F, --form CONTENT  模拟 HTTP 表单数据提交（multipart POST） (H)</span><br><span class="line">    --form-string STRING  模拟 HTTP 表单数据提交 (H)</span><br><span class="line">    --ftp-account DATA  帐户数据提交 (F)</span><br><span class="line">    --ftp-alternative-to-user COMMAND  指定替换 &quot;USER [name]&quot; 的字符串 (F)</span><br><span class="line">    --ftp-create-dirs  如果不存在则创建远程目录 (F)</span><br><span class="line">    --ftp-method [MULTICWD&#x2F;NOCWD&#x2F;SINGLECWD] 控制 CWD (F)</span><br><span class="line">    --ftp-pasv      使用 PASV&#x2F;EPSV 替换 PORT (F)</span><br><span class="line">-P, --ftp-port ADR  使用指定 PORT 及地址替换 PASV (F)</span><br><span class="line">    --ftp-skip-pasv-ip 跳过 PASV 的IP地址 (F)</span><br><span class="line">    --ftp-pret      在 PASV 之前发送 PRET (drftpd) (F)</span><br><span class="line">    --ftp-ssl-ccc   在认证之后发送 CCC (F)</span><br><span class="line">    --ftp-ssl-ccc-mode ACTIVE&#x2F;PASSIVE  设置 CCC 模式 (F)</span><br><span class="line">    --ftp-ssl-control ftp 登录时需要 SSL&#x2F;TLS (F)</span><br><span class="line">-G, --get           使用 HTTP GET 方法发送 -d 数据  (H)</span><br><span class="line">-g, --globoff       禁用的 URL 队列 及范围使用 &#123;&#125; 和 []</span><br><span class="line">-H, --header LINE   要发送到服务端的自定义请求头 (H)</span><br><span class="line">-I, --head          仅显示响应文档头</span><br><span class="line">-h, --help          显示帮助</span><br><span class="line">-0, --http1.0       使用 HTTP 1.0 (H)</span><br><span class="line">    --ignore-content-length  忽略 HTTP Content-Length 头</span><br><span class="line">-i, --include       在输出中包含协议头 (H&#x2F;F)</span><br><span class="line">-k, --insecure      允许连接到 SSL 站点，而不使用证书 (H)</span><br><span class="line">    --interface INTERFACE  指定网络接口／地址</span><br><span class="line">-4, --ipv4          将域名解析为 IPv4 地址</span><br><span class="line">-6, --ipv6          将域名解析为 IPv6 地址</span><br><span class="line">-j, --junk-session-cookies 读取文件中但忽略会话cookie (H)</span><br><span class="line">    --keepalive-time SECONDS  keepalive 包间隔</span><br><span class="line">    --key KEY       私钥文件名 (SSL&#x2F;SSH)</span><br><span class="line">    --key-type TYPE 私钥文件类型 (DER&#x2F;PEM&#x2F;ENG) (SSL)</span><br><span class="line">    --krb LEVEL     启用指定安全级别的 Kerberos (F)</span><br><span class="line">    --libcurl FILE  命令的libcurl等价代码</span><br><span class="line">    --limit-rate RATE  限制传输速度</span><br><span class="line">-l, --list-only    只列出FTP目录的名称 (F)</span><br><span class="line">    --local-port RANGE  强制使用的本地端口号</span><br><span class="line">-L, --location      跟踪重定向 (H)</span><br><span class="line">    --location-trusted 类似 --location 并发送验证信息到其它主机 (H)</span><br><span class="line">-M, --manual        显示全手动</span><br><span class="line">    --mail-from FROM  从这个地址发送邮件</span><br><span class="line">    --mail-rcpt TO  发送邮件到这个接收人(s)</span><br><span class="line">    --mail-auth AUTH  原始电子邮件的起始地址</span><br><span class="line">    --max-filesize BYTES  下载的最大文件大小 (H&#x2F;F)</span><br><span class="line">    --max-redirs NUM  最大重定向数 (H)</span><br><span class="line">-m, --max-time SECONDS  允许的最多传输时间</span><br><span class="line">    --metalink      处理指定的URL上的XML文件</span><br><span class="line">    --negotiate     使用 HTTP Negotiate 认证 (H)</span><br><span class="line">-n, --netrc         必须从 .netrc 文件读取用户名和密码</span><br><span class="line">    --netrc-optional 使用 .netrc 或 URL; 将重写 -n 参数</span><br><span class="line">    --netrc-file FILE  设置要使用的 netrc 文件名</span><br><span class="line">-N, --no-buffer     禁用输出流的缓存</span><br><span class="line">    --no-keepalive  禁用 connection 的 keepalive</span><br><span class="line">    --no-sessionid  禁止重复使用 SSL session-ID (SSL)</span><br><span class="line">    --noproxy       不使用代理的主机列表</span><br><span class="line">    --ntlm          使用 HTTP NTLM 认证 (H)</span><br><span class="line">-o, --output FILE   将输出写入文件，而非 stdout</span><br><span class="line">    --pass PASS     传递给私钥的短语 (SSL&#x2F;SSH)</span><br><span class="line">    --post301       在 301 重定向后不要切换为 GET 请求 (H)</span><br><span class="line">    --post302       在 302 重定向后不要切换为 GET 请求 (H)</span><br><span class="line">    --post303       在 303 重定向后不要切换为 GET 请求 (H)</span><br><span class="line">-#, --progress-bar  以进度条显示传输进度</span><br><span class="line">    --proto PROTOCOLS  启用&#x2F;禁用 指定的协议</span><br><span class="line">    --proto-redir PROTOCOLS  在重定向上 启用&#x2F;禁用 指定的协议</span><br><span class="line">-x, --proxy [PROTOCOL:&#x2F;&#x2F;]HOST[:PORT] 在指定的端口上使用代理</span><br><span class="line">    --proxy-anyauth 在代理上使用 &quot;any&quot; 认证方法 (H)</span><br><span class="line">    --proxy-basic   在代理上使用 Basic 认证  (H)</span><br><span class="line">    --proxy-digest  在代理上使用 Digest 认证 (H)</span><br><span class="line">    --proxy-negotiate 在代理上使用 Negotiate 认证 (H)</span><br><span class="line">    --proxy-ntlm    在代理上使用 NTLM 认证 (H)</span><br><span class="line">-U, --proxy-user USER[:PASSWORD]  代理用户名及密码</span><br><span class="line">     --proxy1.0 HOST[:PORT]  在指定的端口上使用 HTTP&#x2F;1.0 代理</span><br><span class="line">-p, --proxytunnel   使用HTTP代理 (用于 CONNECT)</span><br><span class="line">    --pubkey KEY    公钥文件名 (SSH)</span><br><span class="line">-Q, --quote CMD     在传输开始前向服务器发送命令 (F&#x2F;SFTP)</span><br><span class="line">    --random-file FILE  读取随机数据的文件 (SSL)</span><br><span class="line">-r, --range RANGE   仅检索范围内的字节</span><br><span class="line">    --raw           使用原始HTTP传输，而不使用编码 (H)</span><br><span class="line">-e, --referer       Referer URL (H)</span><br><span class="line">-J, --remote-header-name 从远程文件读取头信息 (H)</span><br><span class="line">-O, --remote-name   将输出写入远程文件</span><br><span class="line">    --remote-name-all 使用所有URL的远程文件名</span><br><span class="line">-R, --remote-time   将远程文件的时间设置在本地输出上</span><br><span class="line">-X, --request COMMAND  使用指定的请求命令</span><br><span class="line">    --resolve HOST:PORT:ADDRESS  将 HOST:PORT 强制解析到 ADDRESS</span><br><span class="line">    --retry NUM   出现问题时的重试次数</span><br><span class="line">    --retry-delay SECONDS 重试时的延时时长</span><br><span class="line">    --retry-max-time SECONDS  仅在指定时间段内重试</span><br><span class="line">-S, --show-error    显示错误. 在选项 -s 中，当 curl 出现错误时将显示</span><br><span class="line">-s, --silent        Silent模式。不输出任务内容</span><br><span class="line">    --socks4 HOST[:PORT]  在指定的 host + port 上使用 SOCKS4 代理</span><br><span class="line">    --socks4a HOST[:PORT]  在指定的 host + port 上使用 SOCKSa 代理</span><br><span class="line">    --socks5 HOST[:PORT]  在指定的 host + port 上使用 SOCKS5 代理</span><br><span class="line">    --socks5-hostname HOST[:PORT] SOCKS5 代理，指定用户名、密码</span><br><span class="line">    --socks5-gssapi-service NAME  为gssapi使用SOCKS5代理服务名称 </span><br><span class="line">    --socks5-gssapi-nec  与NEC Socks5服务器兼容</span><br><span class="line">-Y, --speed-limit RATE  在指定限速时间之后停止传输</span><br><span class="line">-y, --speed-time SECONDS  指定时间之后触发限速. 默认 30</span><br><span class="line">    --ssl           尝试 SSL&#x2F;TLS (FTP, IMAP, POP3, SMTP)</span><br><span class="line">    --ssl-reqd      需要 SSL&#x2F;TLS (FTP, IMAP, POP3, SMTP)</span><br><span class="line">-2, --sslv2         使用 SSLv2 (SSL)</span><br><span class="line">-3, --sslv3         使用 SSLv3 (SSL)</span><br><span class="line">    --ssl-allow-beast 允许的安全漏洞，提高互操作性(SSL)</span><br><span class="line">    --stderr FILE   重定向 stderr 的文件位置. - means stdout</span><br><span class="line">    --tcp-nodelay   使用 TCP_NODELAY 选项</span><br><span class="line">-t, --telnet-option OPT&#x3D;VAL  设置 telnet 选项</span><br><span class="line">     --tftp-blksize VALUE  设备 TFTP BLKSIZE 选项 (必须 &gt;512)</span><br><span class="line">-z, --time-cond TIME  基于时间条件的传输</span><br><span class="line">-1, --tlsv1         使用 &#x3D;&gt; TLSv1 (SSL)</span><br><span class="line">    --tlsv1.0       使用 TLSv1.0 (SSL)</span><br><span class="line">    --tlsv1.1       使用 TLSv1.1 (SSL)</span><br><span class="line">    --tlsv1.2       使用 TLSv1.2 (SSL)</span><br><span class="line">    --trace FILE    将 debug 信息写入指定的文件</span><br><span class="line">    --trace-ascii FILE  类似 --trace 但使用16进度输出</span><br><span class="line">    --trace-time    向 trace&#x2F;verbose 输出添加时间戳</span><br><span class="line">    --tr-encoding   请求压缩传输编码 (H)</span><br><span class="line">-T, --upload-file FILE  将文件传输（上传）到指定位置</span><br><span class="line">    --url URL       指定所使用的 URL</span><br><span class="line">-B, --use-ascii     使用 ASCII&#x2F;text 传输</span><br><span class="line">-u, --user USER[:PASSWORD]  指定服务器认证用户名、密码</span><br><span class="line">    --tlsuser USER  TLS 用户名</span><br><span class="line">    --tlspassword STRING TLS 密码</span><br><span class="line">    --tlsauthtype STRING  TLS 认证类型 (默认 SRP)</span><br><span class="line">    --unix-socket FILE    通过这个 UNIX socket 域连接</span><br><span class="line">-A, --user-agent STRING  要发送到服务器的 User-Agent (H)</span><br><span class="line">-v, --verbose       显示详细操作信息</span><br><span class="line">-V, --version       显示版本号并退出</span><br><span class="line">-w, --write-out FORMAT  完成后输出什么</span><br><span class="line">    --xattr        将元数据存储在扩展文件属性中</span><br><span class="line">-q                 .curlrc 如果作为第一个参数无效</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;curl&lt;/code&gt;是一个开源的用于数据传输的命令行工具与库，它使用&lt;code&gt;URL&lt;/code&gt;语法格式，支持众多传输协议，包括：HTTP、HTTPS、FTP、FTPS、GOPHER、TFTP、SCP、SFTP、SMB、TELNET、DICT、LDAP、L
      
    
    </summary>
    
    
    
      <category term="curl" scheme="http://zhenxingliu.github.io/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>java并发编程一</title>
    <link href="http://zhenxingliu.github.io/2020/03/31/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%80/"/>
    <id>http://zhenxingliu.github.io/2020/03/31/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B8%80/</id>
    <published>2020-03-31T12:00:39.000Z</published>
    <updated>2020-04-06T01:56:20.268Z</updated>
    
    <content type="html"><![CDATA[<p>1.线程介绍</p><ul><li><p>一个进程之内可以分为一到多个线程</p></li><li><p>一个线程就是一个指令流，将指令流中一条条指令以一定的顺序交给CPU执行</p></li><li><p>Java中，线程作为最小调度单位，进程作为资源分配的最小单位</p><p>1.1 并发(concurrent)与并行(parallel)</p></li><li><p>并发是同一时间应对多件事情的能力</p></li><li><p>并行是同一时间动手做多件事情的能力</p></li></ul><p>2.创建并启动线程</p><p>​    2.1直接使用Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法的参数是给线程指定名字，推荐</span></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(<span class="string">"t1"</span>) &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// run 方法内实现了要执行的任务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.debug(<span class="string">"hello"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br></pre></td></tr></table></figure><p>​    2.2 使用Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">// 要执行的任务</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread( runnable );</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>​    2.3使用FutureTask配合Thread</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/ 创建任务对象</span><br><span class="line">FutureTask&lt;Integer&gt; task3 = <span class="keyword">new</span> FutureTask&lt;&gt;(() -&gt; &#123;</span><br><span class="line">log.debug(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="keyword">new</span> Thread(task3, <span class="string">"t3"</span>).start();</span><br><span class="line"><span class="comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class="line">Integer result = task3.get();</span><br><span class="line">log.debug(<span class="string">"结果是:&#123;&#125;"</span>, result);</span><br></pre></td></tr></table></figure><p>​    2.4 查看线程 </p><ul><li>ps -fe 查看所有进程</li><li>ps -fT -p <PID> 查看某个进程（PID）的所有线程</li><li>kill 杀死进程</li><li>top 按大写 H 切换是否显示线程</li><li>top -H -p <PID> 查看某个进程（PID）的所有线程</li></ul><p>3.线程的生命周期</p><p>4.Thread API详细介绍</p><table><thead><tr><th>方法名</th><th>static</th><th>功能说明</th><th>注意</th></tr></thead><tbody><tr><td>start()</td><td></td><td>启动一个线程，在没有执行此方法前，是NEW</td><td>每个线程对象只能调用一次，多次调用报IllegalThreadStateException</td></tr><tr><td>run()</td><td></td><td>新线程启动会调用的方法</td><td></td></tr><tr><td>join()</td><td></td><td>等待线程运行结束</td><td></td></tr><tr><td>join(long n)</td><td></td><td>等待线程运行结束，最多等待n毫秒</td><td></td></tr><tr><td>getId()</td><td></td><td>获取线程长整型的id</td><td></td></tr><tr><td>getName()</td><td></td><td>获取线程名</td><td></td></tr><tr><td>setName(String)</td><td></td><td>修改线程名</td><td></td></tr><tr><td>getPriority()</td><td></td><td>获取线程优先级</td><td></td></tr><tr><td>setPriority(int)</td><td></td><td>修改线程优先级</td><td></td></tr><tr><td>getState()</td><td></td><td>获取线程状态</td><td>6个enum,NEW,RUNNABLE,BLOCKED,WAITING,TIMED_WAITG,TERMINATED</td></tr><tr><td>isInterrupted()</td><td></td><td>判断是否被打断</td><td>不会清除打断标记</td></tr><tr><td>isAlive()</td><td></td><td>线程是否存活</td><td>还没有运行完毕</td></tr><tr><td>interrupt()</td><td></td><td>打断线程</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断</td></tr><tr><td><br/>的线程抛出 InterruptedException，并清除 打断标</td><td></td><td></td><td></td></tr></tbody></table><p>记 ；如果打断的正在运行的线程，则会设置 打断标</p><p>记 ；park 的线程被打断，也会设置 打断标记 |<br>| interrupted()    | static | 判断当前线程是否被打断                             | 会清除中断标记                                               |<br>| currentThread()  | static | 当前线程                                           | 获取当前正在运行的线程                                       |<br>| sleep(long n)    | static | 让当前执行线程休眠n毫秒时让出CPU的时间片给其它线程 | TIME_WAITTING                                                |<br>| yield()          | static | 让出时间片，使用CPU可以调度其它线程                | RUNNABLE状态                                                 |</p><p>6.如何优雅的停止线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.blueheart.concurrency;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoPhaseTermination twoPhaseTermination = <span class="keyword">new</span> TwoPhaseTermination();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两阶段中止模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoPhaseTermination</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread monitor ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread currentThread = Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span> (currentThread.isInterrupted()) &#123;<span class="comment">//被打断，所以清理资源，停止</span></span><br><span class="line">                    log.debug(<span class="string">"清除资源停止"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">1000</span>); <span class="comment">//i1 打断时会抛InterruptedException异常</span></span><br><span class="line">                    log.debug(<span class="string">"开始监控"</span>); <span class="comment">//i2 正常运行打断设置打断标记为True</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    currentThread.interrupt();<span class="comment">//设置打断标志为True</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.debug(<span class="string">"开始停止"</span>);</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>synchronized</p><p>1.轻量级锁</p><p>2.锁彭胀(升级到重量锁)</p><p>3.自旋优化（不用阻塞）</p><p>4.偏向锁（刻上名字）</p><p>wait notify</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.线程介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个进程之内可以分为一到多个线程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个线程就是一个指令流，将指令流中一条条指令以一定的顺序交给CPU执行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java中，线程作为最小调度单位，进程作为资源分配的最
      
    
    </summary>
    
    
    
      <category term="java,并发编程" scheme="http://zhenxingliu.github.io/tags/java-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue.js学习笔记（一）</title>
    <link href="http://zhenxingliu.github.io/2020/02/16/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://zhenxingliu.github.io/2020/02/16/vue-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-02-16T13:10:55.000Z</published>
    <updated>2020-02-16T13:25:13.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础学习列表"><a href="#基础学习列表" class="headerlink" title="基础学习列表"></a>基础学习列表</h2><ol><li><p>MVC和MVVM的区别</p><blockquote><p>MVC是一种后端开发思想，而前端主要使用MVVM的思想，其中VM是其中的关键因素</p></blockquote></li><li><p>学习了Vue中最基本代码的结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el:'#id',</span><br><span class="line">    data:&#123;&#125;,</span><br><span class="line">    methods:&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>插值表达式</p><ul><li>v-cloak:不显示插值表达式</li><li>v-text:显示数据并转义</li><li>v-html:显示数据不转义</li><li>v-bind(:)绑定属性</li><li>v-on(@):绑定事件</li><li>v-model:双向绑定</li><li>v-for:循环</li><li>v-if:判断</li><li>v-show:是否显示</li></ul></li><li><p>事件修饰符</p><ul><li>.stop:阻止事件冒泡</li><li>.prevent:禁止默认事件</li><li>.capture:外层捕获事件</li><li>.self:只对本身对象的事件响应</li><li>.once:事件只执行一次</li></ul></li><li><p>对象主体属性</p><ul><li>el:指定控制区域</li><li>data:指定控制的区域内要用到的数据</li><li>methods:是个对象，自定义方法</li></ul></li><li><p>在v-for要会使用key属性(只接受string/number)</p></li><li><p>v-model只能应用于表单元素</p></li><li><p>在vue中绑定样式的两种方式v-bind:class v-bind:style</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础学习列表&quot;&gt;&lt;a href=&quot;#基础学习列表&quot; class=&quot;headerlink&quot; title=&quot;基础学习列表&quot;&gt;&lt;/a&gt;基础学习列表&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;MVC和MVVM的区别&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MVC是一种后端开发思想，
      
    
    </summary>
    
    
    
      <category term="vue.js,前端开发" scheme="http://zhenxingliu.github.io/tags/vue-js-%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>杜老师的领导笔记</title>
    <link href="http://zhenxingliu.github.io/2020/02/03/%E6%9D%9C%E8%80%81%E5%B8%88%E7%9A%84%E9%A2%86%E5%AF%BC%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhenxingliu.github.io/2020/02/03/%E6%9D%9C%E8%80%81%E5%B8%88%E7%9A%84%E9%A2%86%E5%AF%BC%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-03T12:02:58.000Z</published>
    <updated>2020-02-03T12:11:50.275Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="管理,笔记" scheme="http://zhenxingliu.github.io/tags/%E7%AE%A1%E7%90%86-%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大数据导论学习笔记(二)</title>
    <link href="http://zhenxingliu.github.io/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://zhenxingliu.github.io/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2020-01-08T08:57:17.000Z</published>
    <updated>2020-01-09T05:46:07.071Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大数据与云计算、物联网、人功智能"><a href="#大数据与云计算、物联网、人功智能" class="headerlink" title="大数据与云计算、物联网、人功智能"></a>大数据与云计算、物联网、人功智能</h2><p>1.1 云计算</p><blockquote><p>挖井取水–初期成本高、后期需要自己维护、供水量有限<br>自来水–初期零成本，瞬时可获得;后期免维护，使用成本低;在供水量方面“予取予求“<br>有了自来水，打井的就基本失业了。–商业模式，不要从技术方面切入。</p></blockquote><p>1.2 物联网</p><blockquote><p>物联网就是物与物的联网，是互联网的延伸。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大数据与云计算、物联网、人功智能&quot;&gt;&lt;a href=&quot;#大数据与云计算、物联网、人功智能&quot; class=&quot;headerlink&quot; title=&quot;大数据与云计算、物联网、人功智能&quot;&gt;&lt;/a&gt;大数据与云计算、物联网、人功智能&lt;/h2&gt;&lt;p&gt;1.1 云计算&lt;/p&gt;
&lt;b
      
    
    </summary>
    
    
    
      <category term="大数据" scheme="http://zhenxingliu.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>大数据导论学习笔记(一)</title>
    <link href="http://zhenxingliu.github.io/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://zhenxingliu.github.io/2020/01/08/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%AF%BC%E8%AE%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2020-01-08T03:00:33.000Z</published>
    <updated>2020-01-08T12:10:54.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li><p>数据<br> 1.1 数据是指对客观事件进行记录并可以鉴别的符号，数据和信息两个不同的概念，信息是较为宏观的概念，数据是构成信息的基本单位。<br> 1.2 类型</p><blockquote><p>文本，图片，音频，视频等</p></blockquote><p> 1.3 组织形式</p><blockquote><p>文件和数据库？</p></blockquote><p> 1.4 数据的生命周期</p><blockquote><p>  分类：自动分类，分离出有效的数据<br>  存储：构建分层的存储系统<br>  管理：</p></blockquote><p> 1.5 数据的使用</p><blockquote><p>  数据清洗<br>  数据管理<br>  SQL,NoSQL等。<br>  数据分析<br>  构建统计模型对数据分析<br>  可视化</p></blockquote><p> 1.6 数据的价值<br> 1.7 数据的爆炸<br> 1.8 第三次信息化浪潮</p><blockquote><p>  物联网、云计算、大数据</p></blockquote><p> 1.9 信息科技为大数据时代提供技术支撑</p><blockquote><p>  存储设备容量不断增加，价格下降<br>  网络带宽不断增加<br>  CPU计算能力</p></blockquote><p> 1.10 数据产生方式的变革</p><blockquote><p>  运营式系统阶段<br>  用户原创内容阶段<br>  Web1.0 门户<br>  Web2.0 人人参与<br>  感知式系统阶段<br>  IoT-物联网</p></blockquote><p> 1.11 发展历程</p><blockquote><p>  第一阶段：萌芽期<br>  第二阶段：成熟期<br>  第三阶段：大规模应用<br>  3V:数据容量、处理速度、数据种类</p></blockquote><p> 1.12 概念</p><blockquote><p>  4V:数据量大(Volume)，类型繁多(Variety)，快速化(Velocity)，价值密度低(Value)</p></blockquote><p> 1.13 影响</p><blockquote><p>  大数据决策成为一种新的决策行为<br>  对人才培养的影响<br>  对科学研究的影响</p></blockquote><p> 1.14 大数据的应用<br> 1.15 大数据产业</p><blockquote><p>  IT基础设施<br>  数据源层<br>  数据管理层<br>  数据分析层<br>  数据平台层<br>  数据应用层</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数据&lt;br&gt; 1.1 数据是指对客观事件进行记录并可以鉴别的符号，数据和信息两个不同的概念，信息是较为宏观的概念，数据是构
      
    
    </summary>
    
    
    
      <category term="大数据" scheme="http://zhenxingliu.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>LoadRunner学习笔记</title>
    <link href="http://zhenxingliu.github.io/2020/01/06/LoadRunner%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhenxingliu.github.io/2020/01/06/LoadRunner%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-06T01:24:59.000Z</published>
    <updated>2020-01-08T08:54:10.554Z</updated>
    
    <content type="html"><![CDATA[<p>##LoadRunner性能测试步骤<br>性能测试分为4个阶段：</p><ol><li><p>设计</p><ul><li>收集需求</li><li>设计测试策略</li><li>定义业务流程</li><li>定义系统工作量</li></ul></li><li><p>构建</p><ul><li>设置测试环境</li><li>记录测试脚本</li><li>创建测试方案</li></ul></li><li><p>执行</p><ul><li>基准测试</li><li>性能测试</li><li>可扩展性测试</li><li>报告生成</li></ul></li><li><p>分析、诊断、调节</p><ul><li>诊断瓶颈</li><li>调整配置</li><li>量化改善</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##LoadRunner性能测试步骤&lt;br&gt;性能测试分为4个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设计&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;收集需求&lt;/li&gt;
&lt;li&gt;设计测试策略&lt;/li&gt;
&lt;li&gt;定义业务流程&lt;/li&gt;
&lt;li&gt;定义系统工作量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
    
      <category term="测试,loadRunner" scheme="http://zhenxingliu.github.io/tags/%E6%B5%8B%E8%AF%95-loadRunner/"/>
    
  </entry>
  
  <entry>
    <title>2019-2020时间的朋友跨年演讲经典名句</title>
    <link href="http://zhenxingliu.github.io/2020/01/03/2019-2020%E6%97%B6%E9%97%B4%E7%9A%84%E6%9C%8B%E5%8F%8B%E8%B7%A8%E5%B9%B4%E6%BC%94%E8%AE%B2%E7%BB%8F%E5%85%B8%E5%90%8D%E5%8F%A5/"/>
    <id>http://zhenxingliu.github.io/2020/01/03/2019-2020%E6%97%B6%E9%97%B4%E7%9A%84%E6%9C%8B%E5%8F%8B%E8%B7%A8%E5%B9%B4%E6%BC%94%E8%AE%B2%E7%BB%8F%E5%85%B8%E5%90%8D%E5%8F%A5/</id>
    <published>2020-01-03T14:28:07.000Z</published>
    <updated>2020-01-03T14:37:39.567Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>直面挑战 躬身入局 皆为我辈</strong></li><li><strong>不要走在我后面，因为我可能不会引路。不要走在我前面，因为我可能不会跟随。请走在我的身边，做我的朋友。</strong></li><li><strong>结网能力</strong></li><li><strong>人连接人</strong></li><li><strong>攀岩模式</strong></li></ul><blockquote><p><strong>埋头干+连接人+点亮人–我辈有为！！！</strong></p></blockquote><p><a href="https://pic1cdn.luojilab.com/html/p/Jwzkg4J/2PXAwpjkwOumOyVWEARg.html" target="_blank" rel="noopener">我辈有为</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;直面挑战 躬身入局 皆为我辈&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要走在我后面，因为我可能不会引路。不要走在我前面，因为我可能不会跟随。请走在我的身边，做我的朋友。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;结网能力&lt;
      
    
    </summary>
    
    
    
      <category term="人生,感悟" scheme="http://zhenxingliu.github.io/tags/%E4%BA%BA%E7%94%9F-%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>测试学习笔记(-)</title>
    <link href="http://zhenxingliu.github.io/2020/01/03/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://zhenxingliu.github.io/2020/01/03/%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-01-03T13:53:24.000Z</published>
    <updated>2020-01-04T11:45:45.801Z</updated>
    
    <content type="html"><![CDATA[<p>提纲：</p><h2 id="性能测试概念"><a href="#性能测试概念" class="headerlink" title="性能测试概念"></a>性能测试概念</h2><ul><li>性能测试</li><li>压力测试<br>  长时间的稳定性能力</li><li>负载测试<br>  单位时间内的服务能力</li><li>并发用户数<br>  是指同一时刻与服务器进行数据交互的所有用户数量。<br>  OA系统的并发用户数一般是在线用户的5%-20%。</li><li>响应时间<br>  指应用系统从发出请求开始到客户端接收到所有数据所消耗的时间。<br> 系统环境，网络，模拟真实环境，服务器的情况，发送请求-收到响应。think time-取决业务行为。</li><li>在线用户<br>  在线用户不是给压力的概念。<br>  注册用户&gt;在线用户&gt;活跃用户</li><li>PV<br>  页面查看访问</li><li>吞吐量<br>  单位时间返回数据量,用在评估对比</li><li>TPS<br>  表示服务器每秒处理的事务数</li><li>HPS（点击率）<br>  每秒钟用户向服务器提交的HTTP请求数量</li><li>思考时间(Think Time)<br>  指用户在进行操作时，每个请求之间的时间间隔。</li><li>业务成功率<br>  成功的比率</li><li>系统资源耗用<ul><li>cpu</li><li>内存</li><li>网络带宽</li><li>磁盘</li></ul></li></ul><h2 id="性能测试分类"><a href="#性能测试分类" class="headerlink" title="性能测试分类"></a>性能测试分类</h2><ul><li>负载测试(Load Testing)<ul><li>不断给系统加压，找到系统最大的负载能力，为性能调优提供数据。</li></ul></li><li>压力测试(Stress Testing)<ul><li>指系统已经面试官到一定的饱和程度，此时系统处理业务的能力，是否会有错误。</li></ul></li><li>配置测试(Configuration Testing)<ul><li>通过调整系统软硬件环境，了解各种不同环境对系统性能的影响，从而找到系统的最优配置。</li></ul></li><li>并发测试(Concurrency Testing)<ul><li>模拟用户并发访问，测试多用户同时访问同一应用、模块或数据，观察系统是存在死锁、系统处理速度是否明显下降等其他性能问题。</li></ul></li><li>可靠性测试(Reliability Testing)<ul><li>当系统在一定的业务压力下，让系统持续运行一段时间，观察系统是否达到要求的稳定性。</li></ul></li><li>基准测试(Benchmark Testing)<ul><li>主要是做比较时使用</li></ul></li></ul><h3 id="阶段"><a href="#阶段" class="headerlink" title="阶段"></a>阶段</h3><ul><li>编码<ul><li>并发、压力、容量测试</li></ul></li><li>测试<ul><li>负载、基准、配置测试</li></ul></li></ul><h2 id="性能测试需求分析"><a href="#性能测试需求分析" class="headerlink" title="性能测试需求分析"></a>性能测试需求分析</h2><p>用户频繁使用，并且存在大量用户使用的<br>系统关键功能点，并且存在大量数据操作<br>与外部系统存在接口的，有互相调用关系，大量数据流转<br>用户关注的，暂时会大量使用的<br>要写系统性能分析，需要整理测试点，测试需求报告，<br>要求对系统相当熟悉，确定测试点</p><h2 id="业务模型的建立"><a href="#业务模型的建立" class="headerlink" title="业务模型的建立"></a>业务模型的建立</h2><p>约束条件<br>    数据约束<br>        参数化<br>        造测试数据<br>    环境约束<br>业务流程分析<br>    后面action划分做准备<br>业务流程图</p><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><p>用例设计</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提纲：&lt;/p&gt;
&lt;h2 id=&quot;性能测试概念&quot;&gt;&lt;a href=&quot;#性能测试概念&quot; class=&quot;headerlink&quot; title=&quot;性能测试概念&quot;&gt;&lt;/a&gt;性能测试概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;性能测试&lt;/li&gt;
&lt;li&gt;压力测试&lt;br&gt;  长时间的稳定性能力&lt;/li
      
    
    </summary>
    
    
    
      <category term="测试,loadRunner" scheme="http://zhenxingliu.github.io/tags/%E6%B5%8B%E8%AF%95-loadRunner/"/>
    
  </entry>
  
  <entry>
    <title>2020,干就对了</title>
    <link href="http://zhenxingliu.github.io/2020/01/02/2020-%E5%B9%B2%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    <id>http://zhenxingliu.github.io/2020/01/02/2020-%E5%B9%B2%E5%B0%B1%E5%AF%B9%E4%BA%86/</id>
    <published>2020-01-02T01:49:02.000Z</published>
    <updated>2020-01-02T01:59:04.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年新年第一天，放假，晚上的时候想起去听听老罗“2019 时间的朋友”跨年演讲，听完第一段，最喜欢的就是这句话–“干就对了”。干就对了，多么简单的几个字，但又是多么经典的几个字，少空想一些，想了就去做，人生哪有那么多的规划和按步就班，有梦想就去干，脚踏实地的干，认认真真的干，成功的人生都是干出来的，不是总结出来的，不是想出来的。</p></blockquote><p><strong>2020，借用习大大的一句话“撸起袖子加油干”–2020，加油，加油，加油！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年新年第一天，放假，晚上的时候想起去听听老罗“2019 时间的朋友”跨年演讲，听完第一段，最喜欢的就是这句话–“干就对了”。干就对了，多么简单的几个字，但又是多么经典的几个字，少空想一些，想了就去做，人生哪有那么多的规划和按步就班，有梦想就
      
    
    </summary>
    
    
    
      <category term="笔记,感悟" scheme="http://zhenxingliu.github.io/tags/%E7%AC%94%E8%AE%B0-%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(四)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id>
    <published>2019-12-31T07:42:52.000Z</published>
    <updated>2020-01-02T01:48:27.378Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(三)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2019-12-31T07:42:47.000Z</published>
    <updated>2020-01-02T09:29:46.463Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们已经简单的分析过Collection及其骨架类，这一节我们主要来看看List相关及其具体的实现过程的源码。<br><img src="http://q3d7i1eji.bkt.clouddn.com/WX20200102-102442@2x.png" alt="List和ListIterator接口"><br>看上图，List接口继承自Collection接口，同时增加了相应的队列数据应该具有的方法和功能，在List接口中，又增加了一组返回ListIterator接口的方法，ListIterator在继承自Iterator接口，同时也增加了相应的对List操作的一些特有的方法，如向前方法，下一个元素的Index,set方法，add方法。接下来我们来看看基于List接口的骨架类AbstractList的实现:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractList是继承自AbstractCollection并实现了List，所以所有基础的集合实现都已经存在，只需要针对List进行相应的抽象实现，最重要的有如下几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//将集合增加元素的方法适配到了新的add方法上</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        add(size(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的方法，需要在具体的子类中实现，否则直接报UnsupportedOperationException异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新的方法，替换指定位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对象索引值，从代码看，效率low O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        ListIterator&lt;E&gt; it = listIterator();</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">                <span class="keyword">if</span> (it.next()==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                    <span class="keyword">return</span> it.previousIndex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反向查找 O(n)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        ListIterator&lt;E&gt; it = listIterator(size());</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasPrevious())</span><br><span class="line">                <span class="keyword">if</span> (it.previous()==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> it.nextIndex();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasPrevious())</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.previous()))</span><br><span class="line">                    <span class="keyword">return</span> it.nextIndex();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个Iterator，以内部类的形式实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个ListIterator，以内部类的形式实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>接下来我们看看具体的List实现类ArrayList，LinkedList其实是实现双端队列的List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置arrayList默认容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空数组，当调用无参数构造函数的时候默认给个空数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这才是真正保存数据的数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//arrayList的实际元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法传入默认的capacity 设置默认数组大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参数构造方法默认为空数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法传入一个Collection， 则将Collection里面的值copy到arrayList</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        size = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">elementData</span> </span>= Arrays.copyOf(elementData, size, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面主要看看ArrayList 是如何将数组进行动态扩充实现add 和 remove</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//超出了数组可容纳的长度，需要进行动态扩展</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这才是动态扩展的精髓，看到这个方法，ArrayList瞬间被打回原形</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//设置新数组的容量扩展为原来数组的1.5倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//再判断一下新数组的容量够不够，够了就直接使用这个长度创建新数组， </span></span><br><span class="line">        <span class="comment">//不够就将数组长度设置为需要的长度</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="comment">//判断有没超过最大限制</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">//将原来数组的值copy新数组中去， ArrayList的引用指向新数组</span></span><br><span class="line">        <span class="comment">//这儿会新创建数组，如果数据量很大，重复的创建的数组，那么还是会影响效率，</span></span><br><span class="line">        <span class="comment">//因此鼓励在合适的时候通过构造方法指定默认的capaticy大小</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ArrayList底层是以数组的形式实现的，主要实现了数组的动态扩容，主要方法是grow，具体就是为了防止扩容时溢出，具体可以参见<a href="https://stackoverflow.com/questions/33147339/difference-between-if-a-b-0-and-if-a-b" target="_blank" rel="noopener">difference-between-if-a-b-0-and-if-a-b</a></p><p><strong>ArrayList的本质就是数组， ArrayList就是对数组进行动态的扩展，其add, get , remove 等等操作就是对数组的操作,一些特性都来源于数组：有序、元素可重复、插入慢、 索引快</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们已经简单的分析过Collection及其骨架类，这一节我们主要来看看List相关及其具体的实现过程的源码。&lt;br&gt;&lt;img src=&quot;http://q3d7i1eji.bkt.clouddn.com/WX20200102-102442@2x.png&quot; alt=&quot;List和ListIterator接口&quot;&gt;&lt;br&gt;看上图，List接口继承自Collection接口，同时增加了相应的队列数据应该具有的方法和功能，在List接口中，又增加了一组返回ListIterator接口的方法，ListIterator在继承自Iterator接口，同时也增加了相应的对List操作的一些特有的方法，如向前方法，下一个元素的Index,set方法，add方法。接下来我们来看看基于List接口的骨架类AbstractList的实现:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractList&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AbstractCollection&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;List&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;AbstractList是继承自AbstractCollection并实现了List，所以所有基础的集合实现都已经存在，只需要针对List进行相应的抽象实现，最重要的有如下几个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//将集合增加元素的方法适配到了新的add方法上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(E e)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        add(size(), e);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新的方法，需要在具体的子类中实现，否则直接报UnsupportedOperationException异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新的方法，替换指定位置的元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index, E element)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; E &lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//获取对象索引值，从代码看，效率low O(n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListIterator&amp;lt;E&amp;gt; it = listIterator();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasNext())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (it.next()==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; it.previousIndex();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasNext())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o.equals(it.next()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; it.previousIndex();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//反向查找 O(n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ListIterator&amp;lt;E&amp;gt; it = listIterator(size());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasPrevious())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (it.previous()==&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; it.nextIndex();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (it.hasPrevious())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o.equals(it.previous()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; it.nextIndex();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个Iterator，以内部类的形式实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterator&amp;lt;E&amp;gt; &lt;span class=&quot;title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Itr();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回一个ListIterator，以内部类的形式实现&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; ListIterator&amp;lt;E&amp;gt; &lt;span class=&quot;title&quot;&gt;listIterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; listIterator(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(二)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2019-12-31T07:42:41.000Z</published>
    <updated>2020-01-02T09:29:40.246Z</updated>
    
    <content type="html"><![CDATA[<p>在第一篇图中，我们知道，Set和List接口都继承自Collection,Collection继承了Iterable接口，我们就从Iterable接口开始进行解析.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.</span></span><br><span class="line"><span class="comment">    * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> java.util.Iterator;</span><br><span class="line">    <span class="keyword">import</span> java.util.Objects;</span><br><span class="line">    <span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line">    <span class="keyword">import</span> java.util.Spliterators;</span><br><span class="line">    <span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Implementing this interface allows an object to be the target of</span></span><br><span class="line"><span class="comment">    * the "for-each loop" statement. See</span></span><br><span class="line"><span class="comment">    * &lt;strong&gt;</span></span><br><span class="line"><span class="comment">    * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/language/foreach.html"&gt;For-each Loop&lt;/a&gt;</span></span><br><span class="line"><span class="comment">    * &lt;/strong&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> &lt;T&gt; the type of elements returned by the iterator</span></span><br><span class="line"><span class="comment">    *  </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@jls</span> 14.14.2 The enhanced for statement</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    &lt;font color=#A52A2A size=4 &gt; 实现这个接口的对象可以使用for-each语句进行操作，返回的T是iterator的元素 &lt;/font&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * Returns an iterator over elements of type &#123;<span class="doctag">@code</span> T&#125;.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> an Iterator.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//返回一个Iterator对象，参数类型为T</span></span><br><span class="line">        <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Performs the given action for each element of the &#123;<span class="doctag">@code</span> Iterable&#125;</span></span><br><span class="line"><span class="comment">        * until all elements have been processed or the action throws an</span></span><br><span class="line"><span class="comment">        * exception.  Unless otherwise specified by the implementing class,</span></span><br><span class="line"><span class="comment">        * actions are performed in the order of iteration (if an iteration order</span></span><br><span class="line"><span class="comment">        * is specified).  Exceptions thrown by the action are relayed to the</span></span><br><span class="line"><span class="comment">        * caller.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">        * &lt;p&gt;The default implementation behaves as if:</span></span><br><span class="line"><span class="comment">        * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">        *     for (T t : this)</span></span><br><span class="line"><span class="comment">        *         action.accept(t);</span></span><br><span class="line"><span class="comment">        * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> action The action to be performed for each element</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@throws</span> NullPointerException if the specified action is null</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">                action.accept(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Creates a &#123;<span class="doctag">@link</span> Spliterator&#125; over the elements described by this</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@code</span> Iterable&#125;.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">        * The default implementation creates an</span></span><br><span class="line"><span class="comment">        * &lt;em&gt;&lt;a href="Spliterator.html#binding"&gt;early-binding&lt;/a&gt;&lt;/em&gt;</span></span><br><span class="line"><span class="comment">        * spliterator from the iterable's &#123;<span class="doctag">@code</span> Iterator&#125;.  The spliterator</span></span><br><span class="line"><span class="comment">        * inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the iterable's iterator.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@implNote</span></span></span><br><span class="line"><span class="comment">        * The default implementation should usually be overridden.  The</span></span><br><span class="line"><span class="comment">        * spliterator returned by the default implementation has poor splitting</span></span><br><span class="line"><span class="comment">        * capabilities, is unsized, and does not report any spliterator</span></span><br><span class="line"><span class="comment">        * characteristics. Implementing classes can nearly always provide a</span></span><br><span class="line"><span class="comment">        * better implementation.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> Spliterator&#125; over the elements described by this</span></span><br><span class="line"><span class="comment">        * &#123;<span class="doctag">@code</span> Iterable&#125;.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Iterable接口最重要是返回一个Iterator对象，实现这个接口的对象具备<span class="keyword">for</span>-each使用能力，并且在<span class="number">1.8</span>后有两个默认的接口实现。接下来我们再来看一下Collection接口。</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">package</span> java.util;</span><br><span class="line">    <span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line">    <span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line">    <span class="keyword">import</span> java.util.stream.StreamSupport;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个是集合实现的顶级接口，一个集合代表一组已知元素的对象，它们的有允许重复，有的不允许，有一些需要排序，有一些也不用，所以有一个子接口List和Set.List可以重复对象，Set则不能。</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    */</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// Query Operations</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Returns the number of elements in this collection.  If this collection</span></span><br><span class="line"><span class="comment">        * contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns</span></span><br><span class="line"><span class="comment">        * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> the number of elements in this collection</span></span><br><span class="line"><span class="comment">        * 集合元素的数量</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements</span></span><br><span class="line"><span class="comment">        * 集合是否为空</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">        * 集合是否包含指定的对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Returns an iterator over the elements in this collection.  There are no</span></span><br><span class="line"><span class="comment">        * guarantees concerning the order in which the elements are returned</span></span><br><span class="line"><span class="comment">        * (unless this collection is an instance of some class that provides a</span></span><br><span class="line"><span class="comment">        * guarantee).</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> an &lt;tt&gt;Iterator&lt;/tt&gt; over the elements in this collection</span></span><br><span class="line"><span class="comment">        * 返回集合Iterator</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * &lt;p&gt;This method acts as bridge between array-based and collection-based</span></span><br><span class="line"><span class="comment">        * APIs.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> an array containing all of the elements in this collection</span></span><br><span class="line"><span class="comment">        * 这是一个桥接方法，在集合和数组之间转换，返回集合元素数组</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Object[] toArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 返回指定数组类型的元素数组</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        &lt;T&gt; T[] toArray(T[] a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Modification Operations</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 增加一个元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 删除一个元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Bulk Operations</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 集合是否包含另外一个集合的所有元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 把一个集合加入到此集合中（并集）</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@see</span> #add(Object)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 删除所有指定集合中的元素（差集）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 1.8开始的默认方法，可以执行一个按谓词进行删除</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(filter);</span><br><span class="line">            <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">            <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">                    each.remove();</span><br><span class="line">                    removed = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> removed;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 删除所有不在集合中的元素（交集）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 删除所元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Comparison and hashing</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 相等</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 返回hash值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.8开始的默认实现暂时不用关注，可以看流式编程</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">parallelStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">以上两个接口Collection规范了一个集合应该具体的操作方法，下面我们来看一下</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This class provides a skeletal implementation of the &lt;tt&gt;Collection&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">* interface, to minimize the effort required to implement this interface. &lt;p&gt;</span></span><br><span class="line"><span class="comment">* 提供一个集合实现的骨架，其它类都可以以此类为基础实现自己的集合类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sole constructor.  (For invocation by subclass constructors, typically</span></span><br><span class="line"><span class="comment">    * implicit.)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractCollection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Query Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  两个抽象方法，需要子类实现</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以size为0判断集合是否为空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 判断集合是否包含指定的对象，可以看出来o为null与不为null的判断方法不一样，为null使用==，非null对象使用equals进行比较</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">                <span class="keyword">if</span> (it.next()==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">        Object[] r = <span class="keyword">new</span> Object[size()];</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext()) <span class="comment">// fewer elements than expected</span></span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">            r[i] = it.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">        <span class="keyword">int</span> size = size();</span><br><span class="line">        T[] r = a.length &gt;= size ? a :</span><br><span class="line">                (T[])java.lang.reflect.Array</span><br><span class="line">                .newInstance(a.getClass().getComponentType(), size);</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">                <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                    r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                    <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                        a[i] = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">            r[i] = (T)it.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// more elements than expected</span></span><br><span class="line">        <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = r.length;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">int</span> cap = r.length;</span><br><span class="line">            <span class="keyword">if</span> (i == cap) &#123;</span><br><span class="line">                <span class="keyword">int</span> newCap = cap + (cap &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// overflow-conscious code</span></span><br><span class="line">                <span class="keyword">if</span> (newCap - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">                    newCap = hugeCapacity(cap + <span class="number">1</span>);</span><br><span class="line">                r = Arrays.copyOf(r, newCap);</span><br><span class="line">            &#125;</span><br><span class="line">            r[i++] = (T)it.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// trim if overallocated</span></span><br><span class="line">        <span class="keyword">return</span> (i == r.length) ? r : Arrays.copyOf(r, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError</span><br><span class="line">                (<span class="string">"Required array size too large"</span>);</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Modification Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除一个对象，调用其实是Iterator里的remove</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (it.next()==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bulk Operations</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 并集</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)</span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 差集，从Iterator的remove方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        Iterator&lt;?&gt; it = iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 交集，从Iterator的remove方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!c.contains(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除所有元素，使用的仍然是从Iterator的remove方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            it.next();</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  String conversion</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterator&lt;E&gt; it = iterator();</span><br><span class="line">        <span class="comment">//没有元素返回"[]"</span></span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"[]"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有元素返回"[x, x, ]"样式</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            E e = it.next();</span><br><span class="line">            sb.append(e == <span class="keyword">this</span> ? <span class="string">"(this Collection)"</span> : e);</span><br><span class="line">            <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">']'</span>).toString();</span><br><span class="line">            sb.append(<span class="string">','</span>).append(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>从上我们可以看到，抽象的Collection类只是实现一个模板，针对不同具体集合的具体实现，如底层的数据结构，迭代,增加元素等都有待子接口和子类具体实现。在后面的章节中，会对List和Set进行分别解析。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在第一篇图中，我们知道，Set和List接口都继承自Collection,Collection继承了Iterable接口，我们就从Iterable接口开始进行解析.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; java.lang;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Objects;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Spliterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Spliterators;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.function.Consumer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * Implementing this interface allows an object to be the target of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * the &quot;for-each loop&quot; statement. See&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &amp;lt;strong&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &amp;lt;a href=&quot;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@docRoot&lt;/span&gt;&amp;#125;/../technotes/guides/language/foreach.html&quot;&amp;gt;For-each Loop&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &amp;lt;/strong&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; &amp;lt;T&amp;gt; the type of elements returned by the iterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    *  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    * &lt;span class=&quot;doctag&quot;&gt;@jls&lt;/span&gt; 14.14.2 The enhanced for statement&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;    */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;font color=#A52A2A size=4 &amp;gt; 实现这个接口的对象可以使用for-each语句进行操作，返回的T是iterator的元素 &amp;lt;/font&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Iterable&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * Returns an iterator over elements of type &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; T&amp;#125;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; an Iterator.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//返回一个Iterator对象，参数类型为T&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;Iterator&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * Performs the given action for each element of the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Iterable&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * until all elements have been processed or the action throws an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * exception.  Unless otherwise specified by the implementing class,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * actions are performed in the order of iteration (if an iteration order&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * is specified).  Exceptions thrown by the action are relayed to the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * caller.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@implSpec&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;lt;p&amp;gt;The default implementation behaves as if:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;lt;pre&amp;gt;&amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *     for (T t : this)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *         action.accept(t);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;#125;&amp;lt;/pre&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; action The action to be performed for each element&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; NullPointerException if the specified action is null&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Consumer&amp;lt;? &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Objects.requireNonNull(action);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (T t : &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                action.accept(t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * Creates a &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; Spliterator&amp;#125; over the elements described by this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Iterable&amp;#125;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@implSpec&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * The default implementation creates an&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;lt;em&amp;gt;&amp;lt;a href=&quot;Spliterator.html#binding&quot;&amp;gt;early-binding&amp;lt;/a&amp;gt;&amp;lt;/em&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * spliterator from the iterable&#39;s &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Iterator&amp;#125;.  The spliterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * inherits the &amp;lt;em&amp;gt;fail-fast&amp;lt;/em&amp;gt; properties of the iterable&#39;s iterator.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@implNote&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * The default implementation should usually be overridden.  The&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * spliterator returned by the default implementation has poor splitting&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * capabilities, is unsized, and does not report any spliterator&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * characteristics. Implementing classes can nearly always provide a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * better implementation.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; a &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Spliterator&amp;#125; over the elements described by this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; Iterable&amp;#125;.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        * &lt;span class=&quot;doctag&quot;&gt;@since&lt;/span&gt; 1.8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Spliterator&amp;lt;T&amp;gt; &lt;span class=&quot;title&quot;&gt;spliterator&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Spliterators.spliteratorUnknownSize(iterator(), &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Iterable接口最重要是返回一个Iterator对象，实现这个接口的对象具备&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;-each使用能力，并且在&lt;span class=&quot;number&quot;&gt;1.8&lt;/span&gt;后有两个默认的接口实现。接下来我们再来看一下Collection接口。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(一)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2019-12-31T07:19:46.000Z</published>
    <updated>2019-12-31T07:28:32.775Z</updated>
    
    <content type="html"><![CDATA[<p>   Java集合框架是Java基础，用来对对象进行集合操作，总体图如下：<br>   <img src="http://q3d7i1eji.bkt.clouddn.com/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%80%BB%E5%9B%BE.png" alt="JavaCollection图"></p><h2 id="框架图说明"><a href="#框架图说明" class="headerlink" title="框架图说明"></a>框架图说明</h2><p>Java集合框架主要分为List,Set,Map三类，每一类为了不同的业务场景又有很多不同的实现。其中List和Set都是实现了Collection的子分类.</p><ul><li>List(对付顺序的好帮手)： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</li><li>Set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。</li><li>Map(用Key来搜索的专家): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ul><p>在集合框架中为主要使用模板方法设计模式，同时，为了实现多继承关系，将接口和基本实现分别在多个接口和类不加以实现，以实现类的多重继承关系。后续章节会逐步进行分析和说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   Java集合框架是Java基础，用来对对象进行集合操作，总体图如下：&lt;br&gt;   &lt;img src=&quot;http://q3d7i1eji.bkt.clouddn.com/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%80%BB%
      
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>2019年最后一天</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/2019%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/2019%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</id>
    <published>2019-12-31T06:03:30.000Z</published>
    <updated>2019-12-31T06:22:18.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是2019年最后一天了，也是这个博客正式上线的第一天，是结束，也是开始。即将到来的2020年，第一大喜事是会迎来我的第二个宝贝，当我从现在开始，我要加倍努力，争取在未来的日子里能给我的宝贝们更好的生活，加油！！！！</p></blockquote><h2 id="2020计划"><a href="#2020计划" class="headerlink" title="2020计划"></a>2020计划</h2><ol><li>自律</li><li>读完20本书</li><li>阅读JDK和Spring框架源代码</li><li>做两个项目</li><li>每周写一篇博客</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是2019年最后一天了，也是这个博客正式上线的第一天，是结束，也是开始。即将到来的2020年，第一大喜事是会迎来我的第二个宝贝，当我从现在开始，我要加倍努力，争取在未来的日子里能给我的宝贝们更好的生活，加油！！！！&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
    
      <category term="感悟,生活" scheme="http://zhenxingliu.github.io/tags/%E6%84%9F%E6%82%9F-%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/hello-world/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/hello-world/</id>
    <published>2019-12-31T03:19:28.232Z</published>
    <updated>2019-12-31T03:19:28.232Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
