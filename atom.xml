<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>岁月随想</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhenxingliu.github.io/"/>
  <updated>2020-01-02T01:59:04.303Z</updated>
  <id>http://zhenxingliu.github.io/</id>
  
  <author>
    <name>blueheart</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020,干就对了</title>
    <link href="http://zhenxingliu.github.io/2020/01/02/2020-%E5%B9%B2%E5%B0%B1%E5%AF%B9%E4%BA%86/"/>
    <id>http://zhenxingliu.github.io/2020/01/02/2020-%E5%B9%B2%E5%B0%B1%E5%AF%B9%E4%BA%86/</id>
    <published>2020-01-02T01:49:02.000Z</published>
    <updated>2020-01-02T01:59:04.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年新年第一天，放假，晚上的时候想起去听听老罗“2019 时间的朋友”跨年演讲，听完第一段，最喜欢的就是这句话–“干就对了”。干就对了，多么简单的几个字，但又是多么经典的几个字，少空想一些，想了就去做，人生哪有那么多的规划和按步就班，有梦想就去干，脚踏实地的干，认认真真的干，成功的人生都是干出来的，不是总结出来的，不是想出来的。</p></blockquote><p><strong>2020，借用习大大的一句话“撸起袖子加油干”–2020，加油，加油，加油！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2020年新年第一天，放假，晚上的时候想起去听听老罗“2019 时间的朋友”跨年演讲，听完第一段，最喜欢的就是这句话–“干就对了”。干就对了，多么简单的几个字，但又是多么经典的几个字，少空想一些，想了就去做，人生哪有那么多的规划和按步就班，有梦想就
      
    
    </summary>
    
    
    
      <category term="笔记,感悟" scheme="http://zhenxingliu.github.io/tags/%E7%AC%94%E8%AE%B0-%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(四)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id>
    <published>2019-12-31T07:42:52.000Z</published>
    <updated>2020-01-02T01:48:27.378Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(三)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2019-12-31T07:42:47.000Z</published>
    <updated>2020-01-02T01:48:29.446Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(二)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2019-12-31T07:42:41.000Z</published>
    <updated>2019-12-31T08:34:12.116Z</updated>
    
    <content type="html"><![CDATA[<p>在第一篇图中，我们知道，Set和List接口都继承自Collection,Collection继承了Iterable接口，我们就从Iterable接口开始进行解析.</p><p>‘’’<br>    /*<br>    * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.<br>    * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.<br>    */<br>    package java.lang;</p><pre><code>import java.util.Iterator;import java.util.Objects;import java.util.Spliterator;import java.util.Spliterators;import java.util.function.Consumer;/*** Implementing this interface allows an object to be the target of* the &quot;for-each loop&quot; statement. See* &lt;strong&gt;* &lt;a href=&quot;{@docRoot}/../technotes/guides/language/foreach.html&quot;&gt;For-each Loop&lt;/a&gt;* &lt;/strong&gt;** @param &lt;T&gt; the type of elements returned by the iterator*  * @since 1.5* @jls 14.14.2 The enhanced for statement*/&lt;font color=#A52A2A size=4 &gt; 实现这个接口的对象可以使用for-each语句进行操作，返回的T是iterator的元素 &lt;/font&gt;public interface Iterable&lt;T&gt; {    /**    *    * Returns an iterator over elements of type {@code T}.    * @return an Iterator.    */    //返回一个Iterator对象，参数类型为T    Iterator&lt;T&gt; iterator();    /**    * Performs the given action for each element of the {@code Iterable}    * until all elements have been processed or the action throws an    * exception.  Unless otherwise specified by the implementing class,    * actions are performed in the order of iteration (if an iteration order    * is specified).  Exceptions thrown by the action are relayed to the    * caller.    *    * @implSpec    * &lt;p&gt;The default implementation behaves as if:    * &lt;pre&gt;{@code    *     for (T t : this)    *         action.accept(t);    * }&lt;/pre&gt;    *    * @param action The action to be performed for each element    * @throws NullPointerException if the specified action is null    * @since 1.8    */    default void forEach(Consumer&lt;? super T&gt; action) {        Objects.requireNonNull(action);        for (T t : this) {            action.accept(t);        }    }    /**    * Creates a {@link Spliterator} over the elements described by this    * {@code Iterable}.    *    * @implSpec    * The default implementation creates an    * &lt;em&gt;&lt;a href=&quot;Spliterator.html#binding&quot;&gt;early-binding&lt;/a&gt;&lt;/em&gt;    * spliterator from the iterable&apos;s {@code Iterator}.  The spliterator    * inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the iterable&apos;s iterator.    *    * @implNote    * The default implementation should usually be overridden.  The    * spliterator returned by the default implementation has poor splitting    * capabilities, is unsized, and does not report any spliterator    * characteristics. Implementing classes can nearly always provide a    * better implementation.    *    * @return a {@code Spliterator} over the elements described by this    * {@code Iterable}.    * @since 1.8    */    default Spliterator&lt;T&gt; spliterator() {        return Spliterators.spliteratorUnknownSize(iterator(), 0);    }}</code></pre><p>Iterable接口最重要是返回一个Iterator对象，实现这个接口的对象具备for-each使用能力，并且在1.8后有两个默认的接口实现。接下来我们再来看一下Collection接口。<br>‘’’<br>    /*<br>    * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.<br>    * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.<br>    */</p><pre><code>package java.util;import java.util.function.Predicate;import java.util.stream.Stream;import java.util.stream.StreamSupport;//这个是集合实现的顶级接口，一个集合代表一组已知元素的对象，它们的有允许重复，有的不允许，有一些需要排序，有一些也不用，所以有一个子接口List和Set.List可以重复对象，Set则不能。*/public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; {    // Query Operations    /**    * Returns the number of elements in this collection.  If this collection    * contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements, returns    * &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.    *    * @return the number of elements in this collection    * 集合元素的数量    */    int size();    /**    * Returns &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements.    *    * @return &lt;tt&gt;true&lt;/tt&gt; if this collection contains no elements    * 集合是否为空    */    boolean isEmpty();    /**    * 集合是否包含指定的对象    */    boolean contains(Object o);    /**    * Returns an iterator over the elements in this collection.  There are no    * guarantees concerning the order in which the elements are returned    * (unless this collection is an instance of some class that provides a    * guarantee).    *    * @return an &lt;tt&gt;Iterator&lt;/tt&gt; over the elements in this collection    * 返回集合Iterator    */    Iterator&lt;E&gt; iterator();    /**    *    * &lt;p&gt;This method acts as bridge between array-based and collection-based    * APIs.    *    * @return an array containing all of the elements in this collection    * 这是一个桥接方法，在集合和数组之间转换，返回集合元素数组    */    Object[] toArray();    /**    * 返回指定数组类型的元素数组    */    &lt;T&gt; T[] toArray(T[] a);    // Modification Operations    /**    * 增加一个元素    */    boolean add(E e);    /**    * 删除一个元素    */    boolean remove(Object o);    // Bulk Operations    /**    * 集合是否包含另外一个集合的所有元素    */    boolean containsAll(Collection&lt;?&gt; c);    /**    * 把一个集合加入到此集合中（并集）    * @see #add(Object)    */    boolean addAll(Collection&lt;? extends E&gt; c);    /**    * 删除所有指定集合中的元素（差集）    */    boolean removeAll(Collection&lt;?&gt; c);    /**    * 1.8开始的默认方法，可以执行一个按谓词进行删除    */    default boolean removeIf(Predicate&lt;? super E&gt; filter) {        Objects.requireNonNull(filter);        boolean removed = false;        final Iterator&lt;E&gt; each = iterator();        while (each.hasNext()) {            if (filter.test(each.next())) {                each.remove();                removed = true;            }        }        return removed;    }    /**    * 删除所有不在集合中的元素（交集）    */    boolean retainAll(Collection&lt;?&gt; c);    /**    * 删除所元素    */    void clear();    // Comparison and hashing    /**    * 相等    */    boolean equals(Object o);    /**    * 返回hash值    */    int hashCode();    //1.8开始的默认实现暂时不用关注，可以看流式编程    /**    *     * @since 1.8    */    @Override    default Spliterator&lt;E&gt; spliterator() {        return Spliterators.spliterator(this, 0);    }    /**    *     * @since 1.8    */    default Stream&lt;E&gt; stream() {        return StreamSupport.stream(spliterator(), false);    }    /**    *     * @since 1.8    */    default Stream&lt;E&gt; parallelStream() {        return StreamSupport.stream(spliterator(), true);    }}</code></pre><p>以上两个接口Collection规范了一个集合应该具体的操作方法，下面我们来看一下<br>‘’’<br>    /*<br>    * Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.<br>    * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.<br>    */</p><pre><code>package java.util;/*** This class provides a skeletal implementation of the &lt;tt&gt;Collection&lt;/tt&gt;* interface, to minimize the effort required to implement this interface. &lt;p&gt;* 提供一个集合实现的骨架，其它类都可以以此类为基础实现自己的集合类*/public abstract class AbstractCollection&lt;E&gt; implements Collection&lt;E&gt; {    /**    * Sole constructor.  (For invocation by subclass constructors, typically    * implicit.)    */    protected AbstractCollection() {    }    // Query Operations    /**    *  两个抽象方法，需要子类实现    */    public abstract Iterator&lt;E&gt; iterator();    public abstract int size();    /**    * 以size为0判断集合是否为空    */    public boolean isEmpty() {        return size() == 0;    }    /**    * 判断集合是否包含指定的对象，可以看出来o为null与不为null的判断方法不一样，为null使用==，非null对象使用equals进行比较    */    public boolean contains(Object o) {        Iterator&lt;E&gt; it = iterator();        if (o==null) {            while (it.hasNext())                if (it.next()==null)                    return true;        } else {            while (it.hasNext())                if (o.equals(it.next()))                    return true;        }        return false;    }    /**    *     */    public Object[] toArray() {        // Estimate size of array; be prepared to see more or fewer elements        Object[] r = new Object[size()];        Iterator&lt;E&gt; it = iterator();        for (int i = 0; i &lt; r.length; i++) {            if (! it.hasNext()) // fewer elements than expected                return Arrays.copyOf(r, i);            r[i] = it.next();        }        return it.hasNext() ? finishToArray(r, it) : r;    }    /**    *    */    @SuppressWarnings(&quot;unchecked&quot;)    public &lt;T&gt; T[] toArray(T[] a) {        // Estimate size of array; be prepared to see more or fewer elements        int size = size();        T[] r = a.length &gt;= size ? a :                (T[])java.lang.reflect.Array                .newInstance(a.getClass().getComponentType(), size);        Iterator&lt;E&gt; it = iterator();        for (int i = 0; i &lt; r.length; i++) {            if (! it.hasNext()) { // fewer elements than expected                if (a == r) {                    r[i] = null; // null-terminate                } else if (a.length &lt; i) {                    return Arrays.copyOf(r, i);                } else {                    System.arraycopy(r, 0, a, 0, i);                    if (a.length &gt; i) {                        a[i] = null;                    }                }                return a;            }            r[i] = (T)it.next();        }        // more elements than expected        return it.hasNext() ? finishToArray(r, it) : r;    }    /**    *    */    @SuppressWarnings(&quot;unchecked&quot;)    private static &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) {        int i = r.length;        while (it.hasNext()) {            int cap = r.length;            if (i == cap) {                int newCap = cap + (cap &gt;&gt; 1) + 1;                // overflow-conscious code                if (newCap - MAX_ARRAY_SIZE &gt; 0)                    newCap = hugeCapacity(cap + 1);                r = Arrays.copyOf(r, newCap);            }            r[i++] = (T)it.next();        }        // trim if overallocated        return (i == r.length) ? r : Arrays.copyOf(r, i);    }    private static int hugeCapacity(int minCapacity) {        if (minCapacity &lt; 0) // overflow            throw new OutOfMemoryError                (&quot;Required array size too large&quot;);        return (minCapacity &gt; MAX_ARRAY_SIZE) ?            Integer.MAX_VALUE :            MAX_ARRAY_SIZE;    }    // Modification Operations    /**    * 删除一个对象，调用其实是Iterator里的remove    */    public boolean remove(Object o) {        Iterator&lt;E&gt; it = iterator();        if (o==null) {            while (it.hasNext()) {                if (it.next()==null) {                    it.remove();                    return true;                }            }        } else {            while (it.hasNext()) {                if (o.equals(it.next())) {                    it.remove();                    return true;                }            }        }        return false;    }    // Bulk Operations    /**    * 并集    */    public boolean addAll(Collection&lt;? extends E&gt; c) {        boolean modified = false;        for (E e : c)            if (add(e))                modified = true;        return modified;    }    /**    * 差集，从Iterator的remove方法    */    public boolean removeAll(Collection&lt;?&gt; c) {        Objects.requireNonNull(c);        boolean modified = false;        Iterator&lt;?&gt; it = iterator();        while (it.hasNext()) {            if (c.contains(it.next())) {                it.remove();                modified = true;            }        }        return modified;    }    /**    * 交集，从Iterator的remove方法    */    public boolean retainAll(Collection&lt;?&gt; c) {        Objects.requireNonNull(c);        boolean modified = false;        Iterator&lt;E&gt; it = iterator();        while (it.hasNext()) {            if (!c.contains(it.next())) {                it.remove();                modified = true;            }        }        return modified;    }    /**    * 删除所有元素，使用的仍然是从Iterator的remove方法    */    public void clear() {        Iterator&lt;E&gt; it = iterator();        while (it.hasNext()) {            it.next();            it.remove();        }    }    //  String conversion    /**    *    */    public String toString() {        Iterator&lt;E&gt; it = iterator();        //没有元素返回&quot;[]&quot;        if (! it.hasNext())            return &quot;[]&quot;;        //有元素返回&quot;[x, x, ]&quot;样式        StringBuilder sb = new StringBuilder();        sb.append(&apos;[&apos;);        for (;;) {            E e = it.next();            sb.append(e == this ? &quot;(this Collection)&quot; : e);            if (! it.hasNext())                return sb.append(&apos;]&apos;).toString();            sb.append(&apos;,&apos;).append(&apos; &apos;);        }    }}</code></pre><p>从上我们可以看到，抽象的Collection类只是实现一个模板，针对不同具体集合的具体实现，如底层的数据结构，迭代,增加元素等都有待子接口和子类具体实现。在后面的章节中，会对List和Set进行分别解析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在第一篇图中，我们知道，Set和List接口都继承自Collection,Collection继承了Iterable接口，我们就从Iterable接口开始进行解析.&lt;/p&gt;
&lt;p&gt;‘’’&lt;br&gt;    /*&lt;br&gt;    * Copyright (c) 2003, 2013
      
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架原码解析笔记(一)</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%A0%81%E8%A7%A3%E6%9E%90%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2019-12-31T07:19:46.000Z</published>
    <updated>2019-12-31T07:28:32.775Z</updated>
    
    <content type="html"><![CDATA[<p>   Java集合框架是Java基础，用来对对象进行集合操作，总体图如下：<br>   <img src="http://q3d7i1eji.bkt.clouddn.com/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%80%BB%E5%9B%BE.png" alt="JavaCollection图"></p><h2 id="框架图说明"><a href="#框架图说明" class="headerlink" title="框架图说明"></a>框架图说明</h2><p>Java集合框架主要分为List,Set,Map三类，每一类为了不同的业务场景又有很多不同的实现。其中List和Set都是实现了Collection的子分类.</p><ul><li>List(对付顺序的好帮手)： List接口存储一组不唯一（可以有多个元素引用相同的对象），有序的对象</li><li>Set(注重独一无二的性质): 不允许重复的集合。不会有多个元素引用相同的对象。</li><li>Map(用Key来搜索的专家): 使用键值对存储。Map会维护与Key有关联的值。两个Key可以引用相同的对象，但Key不能重复，典型的Key是String类型，但也可以是任何对象。</li></ul><p>在集合框架中为主要使用模板方法设计模式，同时，为了实现多继承关系，将接口和基本实现分别在多个接口和类不加以实现，以实现类的多重继承关系。后续章节会逐步进行分析和说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   Java集合框架是Java基础，用来对对象进行集合操作，总体图如下：&lt;br&gt;   &lt;img src=&quot;http://q3d7i1eji.bkt.clouddn.com/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E6%80%BB%
      
    
    </summary>
    
    
    
      <category term="Java,源码" scheme="http://zhenxingliu.github.io/tags/Java-%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>2019年最后一天</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/2019%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/2019%E5%B9%B4%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9/</id>
    <published>2019-12-31T06:03:30.000Z</published>
    <updated>2019-12-31T06:22:18.648Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是2019年最后一天了，也是这个博客正式上线的第一天，是结束，也是开始。即将到来的2020年，第一大喜事是会迎来我的第二个宝贝，当我从现在开始，我要加倍努力，争取在未来的日子里能给我的宝贝们更好的生活，加油！！！！</p></blockquote><h2 id="2020计划"><a href="#2020计划" class="headerlink" title="2020计划"></a>2020计划</h2><ol><li>自律</li><li>读完20本书</li><li>阅读JDK和Spring框架源代码</li><li>做两个项目</li><li>每周写一篇博客</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是2019年最后一天了，也是这个博客正式上线的第一天，是结束，也是开始。即将到来的2020年，第一大喜事是会迎来我的第二个宝贝，当我从现在开始，我要加倍努力，争取在未来的日子里能给我的宝贝们更好的生活，加油！！！！&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
    
      <category term="感悟,生活" scheme="http://zhenxingliu.github.io/tags/%E6%84%9F%E6%82%9F-%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhenxingliu.github.io/2019/12/31/hello-world/"/>
    <id>http://zhenxingliu.github.io/2019/12/31/hello-world/</id>
    <published>2019-12-31T03:19:28.232Z</published>
    <updated>2019-12-31T03:19:28.232Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
